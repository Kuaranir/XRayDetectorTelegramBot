import telebot
from telebot import types
import random
import os
import face_recognition
from PIL import Image, ImageDraw
import rembg
from model_torch_function import detect_xray
import psycopg2

#—Ç–æ–∫–µ–Ω –¥–ª—è –±–æ—Ç–∞, –±–µ—Ä–µ—Ç—Å—è –∏–∑ –¢–µ–ª–µ–≥—Ä–∞–º–∞: BotFather
bot = telebot.TeleBot('6059040908:AAHG6F_f5BtpDa_bBrMyrYN6wqnxvf4LW3Y')

#–ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ñ–æ—Ç–∫–∏ —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–º–∏ –ª–∏—Ü–∞–º–∏:
@bot.message_handler(content_types = ['photo'])
def get_photo(message):
    replies = ['–ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ç–æ!üëç', "–û—Ç–ª–∏—á–Ω–æ–µ —Ñ–æ—Ç–æ!üöÄ"] 
    bot.reply_to(message, random.choice(replies))

    raw = message.photo[2].file_id
    path = raw + '.jpg'
    file_info = bot.get_file(raw)
    downloaded_file = bot.download_file(file_info.file_path)
    with open(path, 'wb') as new_file:
        new_file.write(downloaded_file)

    # –ë–õ–û–ö –° –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–ï–ú –õ–ò–¶:
    img = face_recognition.load_image_file(path)
    img_location = face_recognition.face_locations(img)

    pil_img = Image.fromarray(img)
    draw = ImageDraw.Draw(pil_img)

    for (top, right, botton, left) in img_location:
        draw.rectangle(((left, top), (right, botton)),
                        outline = (15, 255, 0), width = 5)

    #–û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Ü –Ω–∞ —Ñ–æ—Ç–æ –∏ –ø–∏—à–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Å–∫–æ–ª—å–∫–æ –ª–∏—Ü –Ω–∞—à–µ–ª –±–æ—Ç:
    face_amount = len(img_location)
    #–ó–∞–¥–∞–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –æ —Ç–æ–º, —Å–∫–æ–ª—å–∫–æ –ª–∏—Ü –æ–Ω –Ω–∞—à–µ–ª:
    if face_amount in [0, None]:
        bot.send_message(message.chat.id, '–Ø –Ω–µ –Ω–∞—à–µ–ª –ª–∏—Ü –Ω–∞ —Ç–≤–æ–µ–º —Ñ–æ—Ç–æ..‚òπ')
    else:
        bot.send_photo(message.chat.id, pil_img)
        if (face_amount == 1 or face_amount % 10 == 1) and (face_amount != 11):
            bot.send_message(message.chat.id, f'–Ø –Ω–∞—à–µ–ª {len(img_location)} –ª–∏—Ü–æ –Ω–∞ —Ç–≤–æ–µ–º —Ñ–æ—Ç–æ üôÇ')
        if face_amount in [2, 3, 4] or (face_amount % 10 in [2, 3, 4]):
            bot.send_message(message.chat.id, f'–Ø –Ω–∞—à–µ–ª {len(img_location)} –ª–∏—Ü–∞ –Ω–∞ —Ç–≤–æ–µ–º —Ñ–æ—Ç–æ üôÇ')
        if face_amount in [5,6,7,8,9,11] or (face_amount % 10 in [5,6,7,8,9]):
            bot.send_message(message.chat.id, f'–Ø –Ω–∞—à–µ–ª {len(img_location)} –ª–∏—Ü –Ω–∞ —Ç–≤–æ–µ–º —Ñ–æ—Ç–æ üôÇ')
    del pil_img
    del draw
    os.remove(path) # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    #os.remove('face_rec_result.jpg') # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ



#–ö–æ–º–∞–Ω–¥–∞ Start (–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É):
@bot.message_handler(commands = ['start'])
def send_greet(message):
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é –æ–ø—Ü–∏—é:')
    
    with open('description.txt', encoding = 'utf-8', mode = 'r') as f:
        bot.send_message(message.chat.id, f.read())

# –ö–æ–º–∞–Ω–¥–∞ background (–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏):
@bot.message_handler(commands = ['background'])
def get_photo(message):
    try:
        sent = bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞')
        bot.register_next_step_handler(sent, remove_bg) #–ü–û–®–ê–ì–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö
    except:
        sent = bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ù–∞–∂–º–∏ /background –∏ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –µ—â–µ —Ä–∞–∑')

def remove_bg(message): 
    try:
        raw = message.photo[2].file_id
        path = raw + '.jpg'
        file_info = bot.get_file(raw)
        downloaded_file = bot.download_file(file_info.file_path)
        with open(path, 'wb') as new_file:
            new_file.write(downloaded_file)

        open_image = Image.open(path)
        output = rembg.remove(open_image)
        bot.send_photo(message.chat.id, output)
        bot.send_message(message.chat.id, '–ì–æ—Ç–æ–≤–æ)')
        del open_image
        del output
        os.remove(path)
    except:
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ù–∞–∂–º–∏ /background –∏ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –µ—â–µ —Ä–∞–∑')

#–ö–æ–º–∞–Ω–¥–∞ xray (–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–Ω–µ–≤–º–æ–Ω–∏–∏ –Ω–∞ —Ä–µ–Ω—Ç–≥–µ–Ω —Å–Ω–∏–º–∫–∞—Ö)
@bot.message_handler(commands = ['xray'])
def get_photo(message):
    try:
        with open('disclaimer.txt', encoding = 'utf-8', mode = 'r') as f:
            bot.send_message(message.chat.id, f.read())
        sent = bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ —Ä–µ–Ω—Ç–≥–µ–Ω-—Å–Ω–∏–º–∫–∞ –≥—Ä—É–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏')
        bot.register_next_step_handler(sent, detect_pneumonia) #–ü–û–®–ê–ì–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö
    except:
        sent = bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ù–∞–∂–º–∏ /xray –∏ –æ—Ç–ø—Ä–∞–≤—å —Å–Ω–∏–º–æ–∫ –µ—â–µ —Ä–∞–∑')

def detect_pneumonia(message):
    try:
        raw = message.photo[2].file_id
        path = raw + '.jpg'
        file_info = bot.get_file(raw)
        downloaded_file = bot.download_file(file_info.file_path)
        with open(path, 'wb') as new_file:
            new_file.write(downloaded_file)
        open_image = Image.open(path)
        prediction = detect_xray(path)
        
        if prediction == 1:
            bot.send_message(message.chat.id, '–ù–∞ —Å–Ω–∏–º–∫–µ –≤–µ—Ä–æ—è—Ç–Ω—ã –æ—á–∞–≥–∏ –ø–Ω–µ–≤–º–æ–Ω–∏–∏')
        elif prediction == 0:
            bot.send_message(message.chat.id, '–ú–æ–∂–Ω–æ —É—Ç–≤–µ—Ä–∂–¥–∞—Ç—å, —á—Ç–æ –≤–∏–¥–∏–º—ã—Ö –æ—á–∞–≥–æ–≤ –ø–Ω–µ–≤–º–æ–Ω–∏–∏ –Ω–∞ —Å–Ω–∏–º–∫–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ')
        del open_image
        del prediction
        del downloaded_file
        os.remove(path)

    except:
        bot.send_message(message.chat.id, '–ù–∞–∂–º–∏ /xray –∏ –æ—Ç–ø—Ä–∞–≤—å —Å–Ω–∏–º–æ–∫')
    
#–ö–æ–º–∞–Ω–¥–∞ Game:
@bot.message_handler(commands = ['game'])
def play(message):
    games = ['üé≤', 'üéØ', 'üèÄ', '‚öΩ', 'üé≥', 'üé∞']
    bot.send_message(message.chat.id, '–°—ã–≥—Ä–∞–µ–º?üì±')
    game = random.choice(games)
    bot.send_dice(message.chat.id, game)
    
#–ö–æ–º–∞–Ω–¥–∞ feedback:
@bot.message_handler(commands = ['feedback'])
def feedback(message):
    sent = bot.send_message(message.chat.id, '–û—Å—Ç–∞–≤—å –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞:üôÇüì±')
    bot.register_next_step_handler(sent, feedback)
def feedback(message):
    review_text = message.text
    with open('reviews.txt', encoding = 'utf-8',  mode = 'a') as f:
        f.write(review_text + ' - ' + message.from_user.first_name + '\n')
    if message.text is not None:
        bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤)')

# –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –º–æ—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ –ì–∏—Ç–•–∞–±–µ
@bot.message_handler(commands = ['site']) 
def site(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ GitHub',
                                          url = 'https://github.com/Kuaranir'))
    bot.reply_to(message, '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ GitHub', reply_markup = markup)

#–ö–æ–º–∞–Ω–¥–∞ survey:
@bot.message_handler(commands = ['survey'])
def survey(message):
    sent = bot.send_message(message.chat.id, '–ü—Ä–æ–π–¥–∏ –æ–ø—Ä–æ—Å –∏–∑ –ø–∞—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤.\n–í–≤–µ–¥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤–æ–∑—Ä–∞—Å—Ç, –≥–æ—Ä–æ–¥ –∏ –ª—é–±–∏–º—É—é –º—É–∑—ã–∫–∞–ª—å–Ω—É—é –≥—Ä—É–ø–ø—Éüé∏')
    bot.register_next_step_handler(sent, survey)

def survey(message):
    answer = message.text
    data = answer.split(',')
    age, city, band = data[0], data[1], data[2]

    connection = psycopg2.connect(user = 'postgres',
                                  password = '23q56q89',
                                  host = '127.0.0.1',
                                  port = '5432',
                                  database = 'mytelegram')
    cursor = connection.cursor()
    postgres_insert_query = 'INSERT INTO bands (age, city, band) VALUES (%s, %s, %s)'
    values_to_insert = (age, city, band)
    cursor.execute(postgres_insert_query, values_to_insert)
    connection.commit()

    bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æüôÇ')


#–ï—Å–ª–∏ —é–∑–µ—Ä –ø–∏—à–µ—Ç –±–æ—Ç—É "–ü—Ä–∏–≤–µ—Ç":
@bot.message_handler()
def info(message):
    if message.text.lower() in '–ø—Ä–∏–≤–µ—Ç':
        bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!')
    elif message.text.lower() in '–∫–∞–∫ –¥–µ–ª–∞':
        bot.send_message(message.chat.id, f'–•–æ—Ä–æ—à–æ, –∞ —É —Ç–µ–±—è?')
    else:
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ /start')
        
#—á—Ç–æ–±—ã –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ, –Ω—É–∂–Ω–æ –ø—Ä–æ–ø–∏—Å–∞—Ç—å:
bot.polling(non_stop = True)
